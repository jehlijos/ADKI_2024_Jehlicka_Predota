# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from draw import Draw
from algorithms import *
from inpout import *
from Settings import Ui_Dialog



class Ui_MainWindow(object):
    def __init__(self):
        pass

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1111, 1015)
        MainWindow.setWindowIcon(QtGui.QIcon("images/icons/applogo.ico"))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Canvas = Draw(parent=self.centralwidget)
        self.Canvas.setObjectName("Canvas")
        self.horizontalLayout.addWidget(self.Canvas)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1111, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAnalysis = QtWidgets.QMenu(parent=self.menubar)
        self.menuAnalysis.setObjectName("menuAnalysis")
        self.menuView = QtWidgets.QMenu(parent=self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuClear = QtWidgets.QMenu(parent=self.menubar)
        self.menuClear.setObjectName("menuClear")
        self.menuSettings = QtWidgets.QMenu(parent=self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.actionOpen = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtGui.QAction(parent=MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon1)
        self.actionExit.setObjectName("actionExit")
        self.actionCreate_DT = QtGui.QAction(parent=MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icons/triangles2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionCreate_DT.setIcon(icon2)
        self.actionCreate_DT.setObjectName("actionCreate_DT")
        self.actionCreateContouLines = QtGui.QAction(parent=MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icons/contours2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionCreateContouLines.setIcon(icon3)
        self.actionCreateContouLines.setObjectName("actionCreateContouLines")
        self.actionAnalyzeSlope = QtGui.QAction(parent=MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/icons/slope2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAnalyzeSlope.setIcon(icon4)
        self.actionAnalyzeSlope.setObjectName("actionAnalyzeSlope")
        self.actionAnalyzeExposition = QtGui.QAction(parent=MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/icons/orientation2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAnalyzeExposition.setIcon(icon5)
        self.actionAnalyzeExposition.setObjectName("actionAnalyzeExposition")
        self.actionDT = QtGui.QAction(parent=MainWindow)
        self.actionDT.setCheckable(True)
        self.actionDT.setObjectName("actionDT")
        self.actionContour_lines_2 = QtGui.QAction(parent=MainWindow)
        self.actionContour_lines_2.setCheckable(True)
        self.actionContour_lines_2.setObjectName("actionContour_lines_2")
        self.actionSlope = QtGui.QAction(parent=MainWindow)
        self.actionSlope.setCheckable(True)
        self.actionSlope.setObjectName("actionSlope")
        self.actionExposition = QtGui.QAction(parent=MainWindow)
        self.actionExposition.setCheckable(True)
        self.actionExposition.setObjectName("actionExposition")
        self.actionHypso = QtGui.QAction(parent=MainWindow)
        self.actionHypso.setCheckable(True)
        self.actionHypso.setObjectName("actionHypso")
        self.actionClear_results = QtGui.QAction(parent=MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("images/icons/clear.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_results.setIcon(icon6)
        self.actionClear_results.setObjectName("actionClear_results")
        self.actionClear_all = QtGui.QAction(parent=MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("images/icons/clear_all.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_all.setIcon(icon7)
        self.actionClear_all.setObjectName("actionClear_all")
        self.actionSettings = QtGui.QAction(parent=MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("images/icons/settings.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionSettings.setIcon(icon9)
        self.actionSettings.setObjectName("actionSettings")
        self.actionHypsometric_tints = QtGui.QAction(parent=MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("images/icons/hypso.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionHypsometric_tints.setIcon(icon10)
        self.actionHypsometric_tints.setObjectName("actionHypsometric_tints")
        self.actionSettings_2 = QtGui.QAction(parent=MainWindow)
        self.actionSettings_2.setIcon(icon9)
        self.actionSettings_2.setObjectName("actionSettings_2")
        self.actionCreate_hypsometric_tints = QtGui.QAction(parent=MainWindow)
        self.actionCreate_hypsometric_tints.setIcon(icon10)
        self.actionCreate_hypsometric_tints.setObjectName("actionCreate_hypsometric_tints")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuAnalysis.addAction(self.actionCreate_DT)
        self.menuAnalysis.addSeparator()
        self.menuAnalysis.addAction(self.actionCreateContouLines)
        self.menuAnalysis.addAction(self.actionAnalyzeSlope)
        self.menuAnalysis.addAction(self.actionAnalyzeExposition)
        self.menuAnalysis.addAction(self.actionCreate_hypsometric_tints)
        self.menuView.addAction(self.actionDT)
        self.menuView.addAction(self.actionContour_lines_2)
        self.menuView.addAction(self.actionSlope)
        self.menuView.addAction(self.actionExposition)
        self.menuView.addAction(self.actionHypso)
        self.menuView.addSeparator()
        self.menuClear.addAction(self.actionClear_results)
        self.menuClear.addSeparator()
        self.menuClear.addAction(self.actionClear_all)
        self.menuSettings.addAction(self.actionSettings_2)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuAnalysis.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuClear.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionCreate_DT)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionCreateContouLines)
        self.toolBar.addAction(self.actionAnalyzeSlope)
        self.toolBar.addAction(self.actionAnalyzeExposition)
        self.toolBar.addAction(self.actionHypsometric_tints)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionClear_results)
        self.toolBar.addAction(self.actionClear_all)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSettings)
        self.toolBar.addAction(self.actionExit)
        self.actionContour_lines_2.triggered.connect(self.viewContourLinesClick)
        self.retranslateUi(MainWindow)
        self.actionOpen.triggered.connect(self.openClick)
        self.actionCreate_DT.triggered.connect(self.createDTClick)
        self.actionAnalyzeSlope.triggered.connect(self.analyzeSlopeClick)
        self.actionAnalyzeExposition.triggered.connect(self.analyzeExpositionClick)
        self.actionCreateContouLines.triggered.connect(self.createContourLinesClick)
        self.actionClear_results.triggered.connect(self.clearClick)
        self.actionClear_all.triggered.connect(self.clearAllClick)
        self.actionExit.triggered.connect(MainWindow.close)
        self.actionDT.triggered.connect(self.viewDTClick)
        self.actionContour_lines_2.triggered.connect(self.viewContourLinesClick)
        self.actionSlope.triggered.connect(self.viewSlopeClick)
        self.actionExposition.triggered.connect(self.viewAspectClick)
        self.actionHypso.triggered.connect(self.viewHypsoClick)
        self.actionSettings.triggered.connect(self.settingsClick)
        self.actionHypsometric_tints.triggered.connect(self.createHypsoClick)
        self.actionSettings_2.triggered.connect(self.settingsClick)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def openClick(self):

        try:
            # Instantiate the IO class
            io = IO()

            # Load data from file
            width = self.Canvas.width()
            height = self.Canvas.height()

            points = io.loadData(width, height)

            # Set points on the canvas
            self.Canvas.SetPoints(points)

            # Repaint the canvas
            self.Canvas.repaint()
        except:
            pass
    def createDTClick(self):
        # Set flag and view button to true
        self.actionDT.setChecked(True)
        self.Canvas.draw_dt = True

        # Get input data
        points = self.Canvas.getPoints()

        # Run DT
        a = Algorithms()
        dt = a.createDT(points)

        # Set results
        self.Canvas.setDT(dt)

        # Repaint
        self.Canvas.repaint()

    def createContourLinesClick(self):

        #Set flag and view button to true
        self.actionContour_lines_2.setChecked(True)
        self.Canvas.draw_contours = True
        # Set DT true
        self.actionDT.setChecked(True)
        self.Canvas.draw_dt = True

        a = Algorithms()

        # No DT
        if len(self.Canvas.getDT()) == 0:
            points = self.Canvas.getPoints()
            dt = a.createDT(points)
            self.Canvas.setDT(dt)

        # Get DT
        else:
            dt = self.Canvas.getDT()

        # Create contour lines
        with open("settings.conf", "r") as file:
            # Reading the configuration file
            lines = file.readlines()
            # Extracting the values of zmin, zmax, and dz
            zmin = int(round(float((lines[0]))))
            zmax = int(round(float((lines[1]))))
            dz = int(round(float((lines[2]))))

        # Create contour lines
        contours = a.CreateCountourLines(dt, zmin, zmax, dz)

        # Set result
        self.Canvas.setContours(contours)

        # Repaint
        self.Canvas.repaint()

    def analyzeSlopeClick(self):
        # Set flag and view button to true
        self.actionSlope.setChecked(True)
        self.Canvas.draw_slope = True
        self.actionDT.setChecked(True)
        self.Canvas.draw_dt = True
        self.Canvas.draw_aspect = False
        self.actionExposition.setChecked(False)
        self.actionHypso.setChecked(False)
        self.Canvas.draw_hypso = False

        a = Algorithms()

        # No DT
        if len(self.Canvas.getDT()) == 0:
            points = self.Canvas.getPoints()
            dt = a.createDT(points)
            self.Canvas.setDT(dt)

        # Get DT
        else:
            dt = self.Canvas.getDT()

        # Analyze slope
        triangles = a.analyzeDTMSlopeAndAspect(dt)

        # Set result
        self.Canvas.setTriangles(triangles)

        # Repaint
        self.Canvas.repaint()

    def analyzeExpositionClick(self):
        # Set flag and view button to true
        self.actionExposition.setChecked(True)
        self.Canvas.draw_aspect = True
        self.actionSlope.setChecked(True)
        self.Canvas.draw_slope = True
        self.actionHypso.setChecked(False)
        self.Canvas.draw_hypso = False

        a = Algorithms()

        # No DT
        if len(self.Canvas.getDT()) == 0:
            points = self.Canvas.getPoints()
            dt = a.createDT(points)
            self.Canvas.setDT(dt)

        # Get DT
        else:
            dt = self.Canvas.getDT()

        # Analyze aspect
        triangles = a.analyzeDTMSlopeAndAspect(dt)

        # Set result
        self.Canvas.setTriangles(triangles)

        # Repaint
        self.Canvas.repaint()

    def viewDTClick(self):
        # Enable/disable drawing of DT
        self.Canvas.setDrawDT(self.actionDT.isChecked())
        # Repaint
        self.Canvas.repaint()

    def viewContourLinesClick(self):
        # Enable/disable drawing of contour lines
        self.Canvas.setDrawContours(self.actionContour_lines_2.isChecked())

        # Update
        self.Canvas.repaint()

    def viewSlopeClick(self):
        # Enable/disable drawing of slope
        self.Canvas.draw_slope = not self.Canvas.draw_slope

        # Update
        self.Canvas.repaint()

    def viewAspectClick(self):
        # Enable/disable drawing of aspect
        self.Canvas.draw_aspect = not self.Canvas.draw_aspect

        # Update
        self.Canvas.repaint()

    def viewHypsoClick(self):
        # Enable/disable drawing of hypsometric tints
        self.Canvas.draw_hypso = not self.Canvas.draw_hypso

        # Update
        self.Canvas.repaint()

    def clearClick(self):
        # Set all flags to false
        self.actionDT.setChecked(False)
        self.Canvas.draw_dt = False
        self.actionContour_lines_2.setChecked(False)
        self.Canvas.draw_contours = False
        self.actionSlope.setChecked(False)
        self.Canvas.draw_slope = False
        self.actionExposition.setChecked(False)
        self.Canvas.draw_aspect = False
        self.actionHypso.setChecked(False)
        self.Canvas.draw_hypso = False

        # Clear all and repaint
        self.Canvas.clearResults()
        self.Canvas.repaint()

    def clearAllClick(self):
        # Set all flags to false
        self.actionDT.setChecked(False)
        self.Canvas.draw_dt = False
        self.actionContour_lines_2.setChecked(False)
        self.Canvas.draw_contours = False
        self.actionSlope.setChecked(False)
        self.Canvas.draw_slope = False
        self.actionExposition.setChecked(False)
        self.Canvas.draw_aspect = False
        self.actionHypso.setChecked(False)
        self.Canvas.draw_hypso = False

        # Clear all and repaint
        self.Canvas.clearAll()
        self.Canvas.repaint()

    def settingsClick(self):
        # Create a new instance of QDialog
        self.dialog = QtWidgets.QDialog()

        # Create a new instance of Ui_Dialog
        self.ui = Ui_Dialog()

        # Setup the dialog
        self.ui.setupUi(self.dialog)

        # Show the dialog
        self.dialog.show()

    def createHypsoClick(self):

        # Set flag and check button to true
        self.actionHypso.setChecked(True)
        self.Canvas.draw_hypso = True

        # Unflag Slope and Aspect
        self.actionSlope.setChecked(False)
        self.Canvas.draw_slope = False
        self.actionExposition.setChecked(False)
        self.Canvas.draw_aspect = False

        a = Algorithms()

        # No DT
        if len(self.Canvas.getDT()) == 0:
            points = self.Canvas.getPoints()
            dt = a.createDT(points)
            self.Canvas.setDT(dt)

        # Get DT
        else:
            dt = self.Canvas.getDT()
            self.Canvas.setDT(dt)

        # Analyze triangles
        triangles = a.analyzeDTMSlopeAndAspect(dt)

        # Set result
        self.Canvas.setTriangles(triangles)

        self.Canvas.repaint()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DTM Analysis"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuAnalysis.setTitle(_translate("MainWindow", "Analysis"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuClear.setTitle(_translate("MainWindow", "Clear"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionOpen.setToolTip(_translate("MainWindow", "Open file"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setToolTip(_translate("MainWindow", "Exit application"))
        self.actionExit.setShortcut(_translate("MainWindow", "Backspace"))
        self.actionCreate_DT.setText(_translate("MainWindow", "Create DT"))
        self.actionCreate_DT.setToolTip(_translate("MainWindow", "Create Delaunay triangulation"))
        self.actionCreateContouLines.setText(_translate("MainWindow", "Create contour lines"))
        self.actionAnalyzeSlope.setText(_translate("MainWindow", "Analyze slope"))
        self.actionAnalyzeSlope.setToolTip(_translate("MainWindow", "Analyze DTM slope"))
        self.actionAnalyzeExposition.setText(_translate("MainWindow", "Analyze exposition"))
        self.actionAnalyzeExposition.setToolTip(_translate("MainWindow", "Analyze DTM exposition"))
        self.actionDT.setText(_translate("MainWindow", "DT"))
        self.actionContour_lines_2.setText(_translate("MainWindow", "Contour lines"))
        self.actionSlope.setText(_translate("MainWindow", "Slope"))
        self.actionExposition.setText(_translate("MainWindow", "Aspect"))
        self.actionHypso.setText(_translate("MainWindow", "Hypsometric tints"))
        self.actionClear_results.setText(_translate("MainWindow", "Clear results"))
        self.actionClear_all.setText(_translate("MainWindow", "Clear all"))
        self.actionSettings.setText(_translate("MainWindow", "Settings"))
        self.actionHypsometric_tints.setText(_translate("MainWindow", "Hypsometric tints"))
        self.actionSettings_2.setText(_translate("MainWindow", "Settings"))
        self.actionCreate_hypsometric_tints.setText(_translate("MainWindow", "Create hypsometric tints"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
