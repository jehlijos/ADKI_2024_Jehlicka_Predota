# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from algorithms import *
from inpout import *
from draw import Draw


class Ui_MainForm(object):
    def setupUi(self, MainForm):
        MainForm.setObjectName("MainForm")
        MainForm.resize(937, 1020)
        MainForm.setWindowIcon(QtGui.QIcon("images/icons/applogo.png"))
        self.centralwidget = QtWidgets.QWidget(parent=MainForm)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.Canvas = Draw(parent=self.centralwidget)
        self.Canvas.setObjectName("Canvas")
        self.verticalLayout.addWidget(self.Canvas)
        MainForm.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainForm)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 937, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAnalyze = QtWidgets.QMenu(parent=self.menubar)
        self.menuAnalyze.setObjectName("menuAnalyze")
        self.menuInput = QtWidgets.QMenu(parent=self.menubar)
        self.menuInput.setObjectName("menuInput")
        MainForm.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainForm)
        self.statusbar.setObjectName("statusbar")
        MainForm.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainForm)
        self.toolBar.setObjectName("toolBar")
        MainForm.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.actionOpen = QtGui.QAction(parent=MainForm)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtGui.QAction(parent=MainForm)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon1)
        self.actionExit.setObjectName("actionExit")
        self.actionRay_Crossing_Alg = QtGui.QAction(parent=MainForm)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icons/ray.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionRay_Crossing_Alg.setIcon(icon2)
        self.actionRay_Crossing_Alg.setObjectName("actionRay_Crossing_Alg")
        self.actionWinding_Number_Alg = QtGui.QAction(parent=MainForm)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icons/winding.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionWinding_Number_Alg.setIcon(icon3)
        self.actionWinding_Number_Alg.setObjectName("actionWinding_Number_Alg")
        self.actionPoint_Polygon = QtGui.QAction(parent=MainForm)
        self.actionPoint_Polygon.setCheckable(True)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/icons/pointpol.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionPoint_Polygon.setIcon(icon4)
        self.actionPoint_Polygon.setObjectName("actionPoint_Polygon")
        self.actionClear_All = QtGui.QAction(parent=MainForm)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/icons/clear_all.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_All.setIcon(icon5)
        self.actionClear_All.setObjectName("actionClear_All")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuAnalyze.addAction(self.actionRay_Crossing_Alg)
        self.menuAnalyze.addAction(self.actionWinding_Number_Alg)
        self.menuInput.addAction(self.actionPoint_Polygon)
        self.menuInput.addSeparator()
        self.menuInput.addAction(self.actionClear_All)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuInput.menuAction())
        self.menubar.addAction(self.menuAnalyze.menuAction())
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionWinding_Number_Alg)
        self.toolBar.addAction(self.actionRay_Crossing_Alg)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionPoint_Polygon)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionClear_All)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionExit)

        self.retranslateUi(MainForm)
        self.actionOpen.triggered.connect(self.openClick)  # type: ignore
        self.actionWinding_Number_Alg.triggered.connect(self.windingNumberClick)  # type: ignore
        self.actionRay_Crossing_Alg.triggered.connect(self.rayCrossingClick)  # type: ignore
        self.actionPoint_Polygon.triggered['bool'].connect(self.pointPolygonClick)  # type: ignore
        self.actionClear_All.triggered.connect(self.clearAllClick)  # type: ignore
        self.actionExit.triggered.connect(MainForm.close)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainForm)
        MainForm.showMaximized()

    def openClick(self):
        # Create object
        io = IO()

        # Run SwitchYellow from draw.py
        self.Canvas.switchYellow()

        size = self.Canvas.size()
        w = size.width()
        h = size.height()
        polygons = io.loadData(w, h)

        # If polygons is not None, then draw polygons
        if polygons != None:
            self.Canvas.setData(polygons)
            self.actionPoint_Polygon.setChecked(True)
            self.actionPoint_Polygon.setEnabled(False)
            self.Canvas.switch2Point()

    def windingNumberClick(self):

        # Get point and polygon
        q = self.Canvas.getPoint()
        polygons = self.Canvas.getPolygon()

        # Create new object
        a = Algorithms()

        positions = 0
        # Run analysis
        position_actions = {
            1:  self.Canvas.greenPolygon,
            2: self.Canvas.greenPolygon,
            3: self.Canvas.greenPolygon
        }

        # Run analysis
        for pol in polygons:
            position = a.windingNumber(q, pol)
            if position in position_actions:
                self.Canvas.switchYellow()
                position_actions[position](pol)
                positions += 1

        # Show results
        if positions == 0:
            self.Canvas.paintRED(polygons)
        else:
            self.Canvas.switchYellow()

    def rayCrossingClick(self):

        # Get point and polygon
        q = self.Canvas.getPoint()
        polygons = self.Canvas.getPolygon()

        # Create new object
        a = Algorithms()

        # Show results
        position_found = False
        # Run analysis
        for pol in polygons:
            position = a.getPointPolPosition(q, pol)
            if position in [1, 2, 3]:
                self.Canvas.switchYellow()
                self.Canvas.greenPolygon(pol)
                position_found = True

        if not position_found:
            self.Canvas.paintRED(polygons)

    def pointPolygonClick(self):
        # Switch between point and polygon
        self.Canvas.switchDraw()

    def clearAllClick(self):
        self.Canvas.clearData()
        self.Canvas.switch2Pols()
        self.actionPoint_Polygon.setEnabled(True)
        self.actionPoint_Polygon.setChecked(False)

    def retranslateUi(self, MainForm):
        _translate = QtCore.QCoreApplication.translate
        MainForm.setWindowTitle(_translate("MainForm", "Analyze point and polygon position"))
        self.menuFile.setTitle(_translate("MainForm", "File"))
        self.menuAnalyze.setTitle(_translate("MainForm", "Analyze"))
        self.menuInput.setTitle(_translate("MainForm", "Input"))
        self.toolBar.setWindowTitle(_translate("MainForm", "toolBar"))
        self.actionOpen.setText(_translate("MainForm", "Open"))
        self.actionOpen.setToolTip(_translate("MainForm", "Open file"))
        self.actionExit.setText(_translate("MainForm", "Exit"))
        self.actionExit.setToolTip(_translate("MainForm", "Exit application"))
        self.actionRay_Crossing_Alg.setText(_translate("MainForm", "Ray Crossing Alg."))
        self.actionRay_Crossing_Alg.setToolTip(_translate("MainForm", "Ray Crossing Algorithm"))
        self.actionWinding_Number_Alg.setText(_translate("MainForm", "Winding Number Alg."))
        self.actionWinding_Number_Alg.setToolTip(_translate("MainForm", "Winding Number Algorithm"))
        self.actionPoint_Polygon.setText(_translate("MainForm", "Point/Polygon"))
        self.actionPoint_Polygon.setToolTip(_translate("MainForm", "Input Point or Polygon"))
        self.actionClear_All.setText(_translate("MainForm", "Clear data"))
        self.actionClear_All.setToolTip(_translate("MainForm", "Clear all data "))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainForm = QtWidgets.QMainWindow()
    ui = Ui_MainForm()
    ui.setupUi(MainForm)
    MainForm.show()
    sys.exit(app.exec())
